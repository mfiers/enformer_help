[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "enformerhelp"
version = "0.1.0"
description = "Helper functions to cache and run Enformer genomic predictions"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = [
    "genomics",
    "enformer",
    "bioinformatics",
    "deep-learning",
    "ucsc",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]
dependencies = [
    "pandas>=1.3.0",
    "matplotlib>=3.3.0",
    "seaborn>=0.11.0",
    "pysam>=0.15.0",
    "enformer-pytorch>=0.1.0",
    "torch>=1.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=3.0",
    "black>=22.0",
    "ruff>=0.1.0",
    "mypy>=1.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/enformer_help"
Documentation = "https://github.com/yourusername/enformer_help#readme"
Repository = "https://github.com/yourusername/enformer_help"
Issues = "https://github.com/yourusername/enformer_help/issues"

[tool.hatch.version]
path = "enformer_help/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["enformer_help"]

[tool.hatch.build.targets.sdist]
include = [
    "/enformer_help",
    "/README.md",
    "/pyproject.toml",
]
exclude = [
    "/.git",
    "/cache",
    "*.pyc",
    "__pycache__",
]

[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.0",
    "pytest-cov>=3.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=enformer_help {args:tests}"
cov-report = [
    "pytest --cov=enformer_help --cov-report=html {args:tests}",
    "python -m webbrowser htmlcov/index.html",
]

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "black>=22.0",
    "ruff>=0.1.0",
    "mypy>=1.0",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:enformer_help}"
style = [
    "ruff check {args:.}",
    "black --check --diff {args:.}",
]
fmt = [
    "black {args:.}",
    "ruff check --fix {args:.}",
    "style",
]
all = [
    "style",
    "typing",
]

[tool.black]
target-version = ["py38"]
line-length = 100
skip-string-normalization = false

[tool.ruff]
target-version = "py38"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["enformer_help"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q"
testpaths = [
    "tests",
]

[tool.coverage.run]
source = ["enformer_help"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
